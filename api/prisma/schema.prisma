// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
//
//    UTILISATEUR
//
//

model User {
  id         String @id @db.VarChar(36)
  email      String @unique
  first_name String
  last_name  String
  password   String

  tickets Tickets[]
  orders  UserOrder[]
}

//
//
//    ADMIN
//
//

model Admin {
  admin_id Int    @id @default(autoincrement())
  name     String
  password String
}

//
//
//    PRESTATAIRE
//
//

model Prestataire {
  id       String  @id @db.VarChar(36)
  icon     String?
  password String

  name       String @unique
  // La référence dans les URLs (par exemple 'porsche', 'kart24', '24hmans', 'mongman' etc...)
  referencer String @unique
  email      String

  accentColor String?
  banner      String?

  links    PrestataireLink[]
  boutique Boutique?
  Shape    Shape[]
  Ecurie   Ecurie?

  @@index([name])
}

model PrestataireLink {
  prestataire_id String @db.VarChar(36)
  id             Int    @id @default(autoincrement())
  name           String
  url            String

  prestataire Prestataire @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)

  @@unique([prestataire_id, id])
}

//
//
//    BOUTIQUE
//
//

model Boutique {
  prestataire_id String      @unique @db.VarChar(36)
  prestataire    Prestataire @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)

  enabled Boolean @default(false)
  shop_id String  @id

  categories       BoutiqueCategory[]
  BoutiqueArticles BoutiqueArticles[]
}

model BoutiqueCategory {
  shop_id        String @db.VarChar(36)
  category_id    String @id
  category_label String

  shop             Boutique           @relation(fields: [shop_id], references: [shop_id], onDelete: Cascade)
  BoutiqueArticles BoutiqueArticles[]
}

model BoutiqueArticles {
  shop_id String   @db.VarChar(36)
  shop    Boutique @relation(fields: [shop_id], references: [shop_id], onDelete: Cascade)

  item_id     Int     @id @default(autoincrement())
  referencer  String  @unique
  name        String
  image       String?
  price       Decimal @db.Decimal(5, 2)
  stock       Int
  description String? @db.Text

  category_id String
  category    BoutiqueCategory @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  deleted          Boolean            @default(false)
  UserOrderArticle UserOrderArticle[]
}

model UserOrder {
  user_id     String             @db.VarChar(36)
  order_id    String             @id @db.VarChar(36)
  total_price Decimal
  date        DateTime           @default(now())
  articles    UserOrderArticle[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserOrderArticle {
  order_id   String           @db.VarChar(36)
  order      UserOrder        @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  article_id Int
  article    BoutiqueArticles @relation(fields: [article_id], references: [item_id], onDelete: Cascade)

  // Price at the moment of the order
  unit_price Decimal @db.Decimal(5, 2)
  amount     Int

  @@id([order_id, article_id])
}

//
//
//    SESSIONS (système d'authentification)
//
//

model Sessions {
  sessionId String   @id @db.Char(10)
  userType  Int // Either 'user', 'presta' or 'admin'
  userId    String   @db.Char(36)
  createdAt DateTime @default(now())
}

//
//
//    CARTE INTERACTIVE
//
//

model Shape {
  shape_id    Int     @id @default(autoincrement())
  name        String?
  logistics   String?
  surface     String?
  description String?
  provider    String? @db.VarChar(36)
  service     String?
  category    String?

  // Un Shape peut avoir plusieurs Points
  point       Point[]
  prestataire Prestataire? @relation(fields: [provider], references: [id], onDelete: SetNull)
}

model Point {
  point_id Int     @id @default(autoincrement())
  lat      Decimal @db.Decimal(30, 20)
  lng      Decimal @db.Decimal(30, 20)

  shape_id Int

  shape Shape @relation(fields: [shape_id], references: [shape_id], onDelete: Cascade)
}

//
//
//    BILLETTERIE
//
//

model Billetteries {
  billetterie_label String @db.VarChar(50)
  billetterie_id    String @id @db.Char(36)
}

model BilletterieCategories {
  category_label String @db.VarChar(50)
  category_id    Int    @id
  billetterie_id String @db.Char(36)
}

model BilletterieForfaits {
  forfait_label  String @db.VarChar(50)
  forfait_id     Int    @id
  billetterie_id String @db.Char(36)
}

model BilletteriePersonnes {
  personne_label String @db.VarChar(50)
  personne_id    Int    @id
  billetterie_id String @db.Char(36)
}

model Tickets {
  user_id        String  @db.VarChar(36)
  ticket_id      Int     @id
  billetterie_id String  @db.VarChar(36)
  category_id    Int
  User           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String? @db.VarChar(36)
}

model TicketBilletterieForfaits {
  forfait_id Int
  ticket_id  Int

  @@id([forfait_id, ticket_id])
}

model TicketBilletteriePersonnes {
  ticket_id        Int
  personne_type_id Int
  quantity         Int

  @@id([ticket_id, personne_type_id])
}

model Ecurie {
  id   String @id @db.VarChar(36)
  name String

  prestataire_id String      @unique @db.VarChar(36)
  prestataire    Prestataire @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)

  formulaires FormulaireEcurie[]
}

model FormulaireEcurie {
  id           Int      @id @default(autoincrement())
  ecurie_id    String   @db.VarChar(36)
  prenom       String
  nom          String
  email        String
  tel          String   @db.VarChar(20)
  num_billet   String   @db.VarChar(36)
  submitted_at DateTime @default(now())

  ecurie Ecurie @relation(fields: [ecurie_id], references: [id], onDelete: Cascade)
}
