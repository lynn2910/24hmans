// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
//
//    UTILISATEUR
//
//

model User {
  id         String @id @db.VarChar(36)
  email      String @unique
  first_name String
  last_name  String
  password   String

  tickets Tickets[]
  orders  UserOrder[]

  karting_sessions UserKartingSession[]
}

//
//
//    ADMIN
//
//

model Admin {
  admin_id Int    @id @default(autoincrement())
  name     String
  password String
}

//
//
//    PRESTATAIRE
//
//

model Prestataire {
  id          String  @id @db.VarChar(36)
  icon        String?
  password    String
  description String? @db.LongText

  name       String @unique
  // La référence dans les URLs (par exemple 'porsche', 'kart24', '24hmans', 'mongman' etc...)
  referencer String @unique
  email      String

  accentColor String?
  banner      String?

  links PrestataireLink[]
  Shape Shape[]

  boutique    Boutique?
  Ecurie      Ecurie?
  Billetterie Billetteries?
  karting     Karting?

  @@index([name])
}

model PrestataireLink {
  prestataire_id String @db.VarChar(36)
  id             Int    @id @default(autoincrement())
  name           String
  url            String

  prestataire Prestataire @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)

  @@unique([prestataire_id, id])
}

//
//
//    BOUTIQUE
//
//

model Boutique {
  prestataire_id String      @unique @db.VarChar(36)
  prestataire    Prestataire @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)

  enabled Boolean @default(false)
  shop_id String  @id

  categories BoutiqueCategory[]
  articles   BoutiqueArticles[]
}

model BoutiqueCategory {
  shop_id        String @db.VarChar(36)
  category_id    String @id
  category_label String

  shop     Boutique           @relation(fields: [shop_id], references: [shop_id], onDelete: Cascade)
  articles BoutiqueArticles[]
}

model BoutiqueArticles {
  shop_id String   @db.VarChar(36)
  shop    Boutique @relation(fields: [shop_id], references: [shop_id], onDelete: Cascade)

  item_id     Int     @id @default(autoincrement())
  referencer  String  @unique
  name        String
  image       String?
  price       Decimal @db.Decimal(5, 2)
  stock       Int
  description String? @db.Text

  category_id String
  category    BoutiqueCategory @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  deleted          Boolean            @default(false)
  UserOrderArticle UserOrderArticle[]
}

model UserOrder {
  user_id     String             @db.VarChar(36)
  order_id    String             @id @db.VarChar(36)
  total_price Decimal
  date        DateTime           @default(now())
  articles    UserOrderArticle[]

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserOrderArticle {
  order_id   String           @db.VarChar(36)
  order      UserOrder        @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  article_id Int
  article    BoutiqueArticles @relation(fields: [article_id], references: [item_id], onDelete: Cascade)

  // Price at the moment of the order
  unit_price Decimal @db.Decimal(5, 2)
  amount     Int

  @@id([order_id, article_id])
}

//
//
//    CARTE INTERACTIVE
//
//

model Shape {
  shape_id    Int     @id @default(autoincrement())
  name        String?
  logistics   String?
  surface     String?
  description String?
  provider    String? @db.VarChar(36)
  service     String?
  category    String?

  point       Point[]
  prestataire Prestataire? @relation(fields: [provider], references: [id], onDelete: SetNull)
}

model Point {
  point_id Int     @id @default(autoincrement())
  lat      Decimal @db.Decimal(30, 20)
  lng      Decimal @db.Decimal(30, 20)

  shape_id Int

  shape Shape @relation(fields: [shape_id], references: [shape_id], onDelete: Cascade)
}

//
//
//    BILLETTERIE
//
//

model Billetteries {
  billetterie_label String @db.VarChar(50)
  billetterie_id    String @id @db.Char(36)

  prestataire_id        String                  @unique @db.Char(36)
  prestataire           Prestataire             @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)
  BilletterieCategories BilletterieCategories[]
  BilletterieForfaits   BilletterieForfaits[]
  BilletteriePersonnes  BilletteriePersonnes[]
  Tickets               Tickets[]
}

model BilletterieCategories {
  category_label String @db.VarChar(50)
  category_id    Int    @id

  billetterie_id String       @db.Char(36)
  billetterie    Billetteries @relation(fields: [billetterie_id], references: [billetterie_id], onDelete: Cascade)
  Tickets        Tickets[]
}

model BilletterieForfaits {
  forfait_label String @db.VarChar(50)
  forfait_id    Int    @id

  billetterie_id            String                      @db.Char(36)
  billetterie               Billetteries                @relation(fields: [billetterie_id], references: [billetterie_id], onDelete: Cascade)
  TicketBilletterieForfaits TicketBilletterieForfaits[]
}

model BilletteriePersonnes {
  personne_label String @db.VarChar(50)
  personne_id    Int    @id

  billetterie_id             String                       @db.Char(36)
  billetterie                Billetteries                 @relation(fields: [billetterie_id], references: [billetterie_id], onDelete: Cascade)
  TicketBilletteriePersonnes TicketBilletteriePersonnes[]
}

model Tickets {
  user_id String @db.VarChar(36)
  User    User?  @relation(fields: [user_id], references: [id])

  ticket_id Int @id

  billetterie_id String       @db.VarChar(36)
  billetterie    Billetteries @relation(fields: [billetterie_id], references: [billetterie_id], onDelete: Cascade)

  category_id Int
  category    BilletterieCategories @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  forfait   TicketBilletterieForfaits[]
  personnes TicketBilletteriePersonnes[]
}

model TicketBilletterieForfaits {
  forfait_id Int
  forfait    BilletterieForfaits @relation(fields: [forfait_id], references: [forfait_id], onDelete: Cascade)

  ticket_id Int
  ticket    Tickets @relation(fields: [ticket_id], references: [ticket_id], onDelete: Cascade)

  @@id([forfait_id, ticket_id])
}

model TicketBilletteriePersonnes {
  ticket_id Int
  ticket    Tickets @relation(fields: [ticket_id], references: [ticket_id], onDelete: Cascade)

  personne_type_id Int
  personne         BilletteriePersonnes @relation(fields: [personne_type_id], references: [personne_id], onDelete: Cascade)

  quantity Int

  @@id([ticket_id, personne_type_id])
}

//
//
//    ECURIE
//
//

model Ecurie {
  id   String @id @db.VarChar(36)
  name String

  prestataire_id   String             @unique @db.VarChar(36)
  prestataire      Prestataire        @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)
  FormulaireEcurie FormulaireEcurie[]
}

model FormulaireEcurie {
  id           Int      @id @default(autoincrement())
  ecurie_id    String   @db.VarChar(36)
  prenom       String
  nom          String
  year         Int
  email        String
  tel          String   @db.VarChar(20)
  num_billet   String   @db.VarChar(36)
  submitted_at DateTime @default(now())
  is_winner    Boolean  @default(false) // Ajout de la valeur par défaut

  ecurie Ecurie @relation(fields: [ecurie_id], references: [id], onDelete: Cascade)
}

//
//
//    Système de réservations
//
//

model ReservationApp {
  app_id String @id @db.VarChar(36)

  reservation_slots ReservationSlot[]

  Karting Karting[]
}

model ReservationSlot {
  reservation_id String         @id @db.VarChar(36)
  app_id         String         @db.VarChar(36)
  app            ReservationApp @relation(fields: [app_id], references: [app_id], onDelete: Cascade)

  from DateTime
  to   DateTime

  // Le nombre maximal de personnes pouvant réserver
  maxSize Int

  karting_sessions KartingSessionSlot[]
}

//
//
//    Karting
//
//

model Karting {
  karting_id     String      @id @db.VarChar(36)
  prestataire_id String      @unique @db.VarChar(36)
  prestataire    Prestataire @relation(fields: [prestataire_id], references: [id], onDelete: Cascade)

  // Ca sera utile pour récupérer facilement toutes les réservations du karting
  reservation_app_id String         @unique @db.VarChar(36)
  reservations       ReservationApp @relation(fields: [reservation_app_id], references: [app_id], onDelete: Cascade)

  enabled Boolean @default(false)

  // La liste des circuits
  circuits KartingCircuit[]

  sessions KartingSessionSlot[]
}

// Les sessions créées par le karting
model KartingSessionSlot {
  session_id String @id @db.VarChar(36)

  karting_id String  @db.VarChar(36)
  karting    Karting @relation(fields: [karting_id], references: [karting_id], onDelete: Cascade)

  session_slot_id String          @db.VarChar(36)
  session_slot    ReservationSlot @relation(fields: [session_slot_id], references: [reservation_id], onDelete: Cascade)

  users UserKartingSession[]
}

model UserKartingSession {
  session_id Int     @id @default(autoincrement())
  pseudo     String?

  user_id String @db.VarChar(36)
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  reservation_slot_id String             @db.VarChar(36)
  reservation_slot    KartingSessionSlot @relation(fields: [reservation_slot_id], references: [session_id], onDelete: Cascade)

  circuit_id String?         @db.VarChar(36)
  circuit    KartingCircuit? @relation(fields: [circuit_id], references: [circuit_id], onDelete: SetNull)
}

// Chaque circuit possède:
// - Un nom
// - Un age minimal (enfants vs adultes)
// - La vitesse max des carts
// - Les réservations
model KartingCircuit {
  circuit_id String @id @db.VarChar(36)

  karting_id String  @db.VarChar(36)
  karting    Karting @relation(fields: [karting_id], references: [karting_id], onDelete: Cascade)

  minAge       Int
  circuit_name String
  // Exemple: 160 pour "Kart 160 CC" ou 270 pour "Kart 270 CC", ou encore 390 pour "Kart 390 CC"
  kart_power   Int

  sessions UserKartingSession[]
}
